/*
 * generated by Xtext 2.10.0
 */
package org.xtext.comp.generator

import java.util.HashMap
import java.util.List
import java.util.Set
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class WhGenerator extends AbstractGenerator {
	private GenTable genTable;
	private final int globalIndent = 3;
	private String funName;
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		//N'est pas utilisÃ©e
	}
	
	def void doGenerate(GenTable genTable, IFileSystemAccess2 fsa, String outputName) {
		this.genTable = genTable;
    	fsa.generateFile(outputName, genTable.listCode3Adr.genCode3Adr)
	}
	
	def String genCode3Adr(HashMap<Code, List<Instr>> map){
		'''
		«FOR fun : map.keySet()»
		«funName = fun.name»
		function «funName»(«printList(genTable.environmentFonctions.get(fun.name).getInputs().keySet(),", ")»)
		«genCommands(map.get(fun),globalIndent)»
		
		return «printList(genTable.environmentFonctions.get(fun.name).getOutputs().keySet(),", ")»
		end
		«ENDFOR»
		'''
		}
	
	
	def String genCommands(List<Instr> instrs, int indent)
		'''
		«FOR instr : instrs»
		«genCommand(instr, indent)»
		«ENDFOR»
		'''
	
	def String genCommand(Instr instr, int pIndent)
	{
		if(instr instanceof InstrNop)	return "";
		if(instr instanceof InstrIf)    return genIf(instr,pIndent);
		return "TODO"
	}

	
	def String genIf(InstrIf instr, int pIndent){
		var parentIndent = makeIndent(pIndent)
	    var indent = pIndent + globalIndent
	    var cond = "";
		'''
		«parentIndent»if «cond» then 
		«genCommands(instr.getSiVrai(), indent)»
		«IF !instr.getSiFaux().empty»
		«parentIndent»else 
		«genCommands(instr.getSiFaux(),indent)»
		«ENDIF»
		«parentIndent»end
		'''
	}
	
	
	def String printList(Set<String> list, String delim){
		
		var res = ""
    	if(list.size > 1){
    		for(i:0..list.size-2){
    			res+= list.get(i)+delim
    		}
    		res += list.get(list.size-1)
    	}    	
    	return res
	}
	
	 def String makeIndent(int indent){
    	var res = ""
    	for(i:0..indent){
    		if(i<indent) res+=" ";
    	}
    	return res
    }
}
