/*
 * generated by Xtext 2.10.0
 */
package org.xtext.comp.generator

import org.eclipse.emf.common.util.EList
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.comp.wh.Command
import org.xtext.comp.wh.Commands
import org.xtext.comp.wh.Definition
import org.xtext.comp.wh.Expr
import org.xtext.comp.wh.ExprAnd
import org.xtext.comp.wh.ExprCons
import org.xtext.comp.wh.ExprOr
import org.xtext.comp.wh.ExprSimple
import org.xtext.comp.wh.Function
import org.xtext.comp.wh.Input
import org.xtext.comp.wh.Output
import org.xtext.comp.wh.Program
import org.xtext.comp.wh.impl.AffectImpl
import org.xtext.comp.wh.impl.ExprAndImpl
import org.xtext.comp.wh.impl.ExprConsImpl
import org.xtext.comp.wh.impl.ExprOrImpl
import org.xtext.comp.wh.impl.ExprSimpleImpl
import org.xtext.comp.wh.impl.ForImpl
import org.xtext.comp.wh.impl.IfImpl
import org.xtext.comp.wh.impl.NopImpl
import org.xtext.comp.wh.impl.WhileImpl

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class WhGenerator extends AbstractGenerator {
	int ifIndent;
	int commandIndent;
	int whileIndent;
	int forIndent;
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		//N'est pas utilisÃ©e
	}
	
	def void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context, String outputName, int ifIndent, int commandIndent, int whileIndent, int forIndent) {
		this.ifIndent = ifIndent;
		this.commandIndent = commandIndent;
		this.whileIndent = whileIndent;
		this.forIndent = forIndent;
		for (p : resource.allContents.toIterable.filter(Program)) {
        	fsa.generateFile(outputName, p.prettyPrint)
    	}
	}
	
	def prettyPrint(Program p)'''
	«FOR f : p.functions»
	«f.prettyPrint»
	«ENDFOR»
	'''
	
	
	def prettyPrint(Function f) '''
            function «f.name»:
            «f.definition.prettyPrint»
        '''
                 
    def prettyPrint(Definition d) ''' 
    	read «d.input.prettyPrint»
    	%
    	«d.commands.prettyPrint(commandIndent)»
    	%
    	write «d.output.prettyPrint»
    '''
    
    def prettyPrint(Input i) {
    	return printList(i.vars,",")    
    }
    
    def prettyPrint(Output o){
    	return printList(o.vars,",")
    }
    
    def String prettyPrint(Commands cmds, int pIndent){
    	var res = "";
    	if(cmds.commands.size > 1){
    		for(i:0..cmds.commands.size-2){
    			res += cmds.commands.get(i).prettyPrint(pIndent)+" ;\n"
    		}
    	}
    	res += cmds.commands.get(cmds.commands.size-1).prettyPrint(pIndent)
    	return res
    }
    
    def prettyPrint(Command c, int pIndent) {
    	if( c.cmd instanceof NopImpl ) {
    		return (c.cmd as NopImpl).prettyPrint(pIndent)
       	} 
       	
       	if( c.cmd instanceof AffectImpl ) {
    		return (c.cmd as AffectImpl).prettyPrint(pIndent)
       	}
       	
       	if( c.cmd instanceof IfImpl ) {
    		return (c.cmd as IfImpl).prettyPrint(pIndent)
       	}
       	
       	if(c.cmd instanceof WhileImpl) {
       		return (c.cmd as WhileImpl).prettyPrint(pIndent)
       	}
       	
       	if(c.cmd instanceof ForImpl){
       		return (c.cmd as ForImpl).prettyPrint(pIndent)
       	}
    }
    
    def prettyPrint( NopImpl n , int pIndent) '''«makeIndent(pIndent)»«n.nop»'''
    	
    def String prettyPrint( Expr e){
    	if(e.expr instanceof ExprCons){
    		return (e.expr as ExprConsImpl).prettyPrint()
    	}
    	if( e.expr instanceof ExprSimple ) {
    		return (e.expr as ExprSimpleImpl).prettyPrint()
       	} 
       	
       	if( e.expr instanceof ExprAnd ) {
    		return (e.expr as ExprAndImpl).prettyPrint()
       	}
       	
       	if( e.expr instanceof ExprOr ) {
    		return (e.expr as ExprOrImpl).prettyPrint()
       	}
       	
    }
    	
    	
	def String prettyPrint( ExprSimpleImpl e){
		if(e.str == null){
			if(e.varSimple == null){
				return e.sym;
			}
			return e.varSimple
		}
		return e.str
	}
	
	def String prettyPrint( ExprAndImpl e){
		return "("+ (e.arg1 as ExprSimpleImpl).prettyPrint() + " and " + e.arg2.prettyPrint() + ")"
	}
	
	def String prettyPrint( ExprOrImpl e){
		return "("+ (e.arg1 as ExprSimpleImpl).prettyPrint() + " or " + e.arg2.prettyPrint() + ")"
	}
	
	def String prettyPrint(ExprConsImpl e){
		return "(cons "+(e.arg1).prettyPrint()+ " " + (e.arg2).prettyPrint()+")"
	}
    	
    def String prettyPrint(WhileImpl w, int pIndent){
    	var parentIndent = makeIndent(pIndent);
    	var indent = pIndent+whileIndent;
    	'''
    	«parentIndent»while «w.expr.prettyPrint()» do
    	«w.cmds.prettyPrint(indent)»
    	«parentIndent»od
    	'''
    }
    
    def String prettyPrint(ForImpl w, int pIndent){
    	var parentIndent = makeIndent(pIndent);
    	var indent = pIndent+whileIndent;
    	'''
    	«parentIndent»while «w.expr.prettyPrint()» do
    	«w.cmds.prettyPrint(indent)»
    	«parentIndent»od
    	'''
    }
    
    def String prettyPrint( IfImpl i, int pIndent){
    	var parentIndent = makeIndent(pIndent)
    	var indent = pIndent + ifIndent
    	'''
    	«parentIndent»if «i.expr.prettyPrint()» then
    	«i.commands1.prettyPrint(indent)»
    	«IF i.commands2 != null»
    	«parentIndent»else
    	«i.commands2.prettyPrint(indent)»
    	«ENDIF»
    	«parentIndent»fi
    	'''
    	
    	}
    
    def String prettyPrint(AffectImpl a,int pIndent) '''
    «makeIndent(pIndent)»«printList(a.vars,", ")» := «printList2(a.exprs,", ")»'''
    
    
    def String prettyPrint (String s){
    	return s
    }
    
     def String printList2(EList<Expr> list, String delim){
	
     	var res = ""
     	if(list.size > 1){
     		for(i:0..list.size-2){
    			res+= list.get(i).prettyPrint()+delim
    		}
    	}
    	res += list.get(list.size-1).prettyPrint()
    	return res
    }
    
    def String printList(EList<String> list, String delim){
    	var res = ""
    	if(list.size > 1){
    		for(i:0..list.size-2){
    			res+= list.get(i).prettyPrint()+delim
    		}
    	}
    	res += list.get(list.size-1).prettyPrint()
    	
    	return res
    }
    
    def String makeIndent(int indent){
    	var res = ""
    	for(i:0..indent){
    		if(i<indent) res+=" ";
    	}
    	return res
    }
}
